ListView
A scrollable list of controls arranged linearly.

ListView is the most commonly used scrolling control. It displays its children one after another in the scroll direction. In the cross axis, the children are required to fill the ListView.

info
ListView is very effective for large lists (thousands of items). Prefer it over Column or Row for smooth scrolling.

Examples
Live example

Auto-scrolling ListView with Toggle
python/controls/layout/list-view/listview-toggle-scroll.py
from time import sleep
import flet as ft


def main(page: ft.Page):

    def change_auto_scroll(e):
        print("Change auto scroll triggered")
        lv.auto_scroll = not lv.auto_scroll
        page.update()

    lv = ft.ListView(spacing=10, padding=20, width=150, auto_scroll=True)
    lvc = ft.Container(
        content=lv,
        bgcolor=ft.Colors.GREY_500,
    )
    sw = ft.Switch(
        thumb_icon=ft.Icons.LIST_OUTLINED,
        value=True,
        label="Auto-scroll",
        label_position=ft.LabelPosition.RIGHT,
        on_change=change_auto_scroll,
    )

    c = ft.Row(
        [lvc, sw],
        expand=True,
        vertical_alignment=ft.CrossAxisAlignment.START,
    )

    count = 1

    for i in range(0, 60):
        lv.controls.append(ft.Text(f"Line {count}", color=ft.Colors.ON_SECONDARY))
        count += 1

    page.add(c)

    for i in range(0, 60):
        sleep(1)
        lv.controls.append(ft.Text(f"Line {count}", color=ft.Colors.ON_SECONDARY))
        count += 1
        page.update()


ft.app(main)

View on GitHub

Properties
auto_scroll
True if scrollbar should automatically move its position to the end when children updated. Must be False for scroll_to() method to work.

Defaults to False.

build_controls_on_demand
Whether the controls should be built lazily/on-demand, i.e. only when they are about to become visible. This is particularly useful when dealing with a large number of controls.

Defaults to True.

cache_extent
Items that fall in the cache area (area before or after the visible area that are about to become visible when the user scrolls) are laid out even though they are not (yet) visible on screen. The cacheExtent describes how many pixels the cache area extends before the leading edge and after the trailing edge of the viewport.

The total extent, which the viewport will try to cover with controls, is cache_extent before the leading edge + extent of the main axis + cache_extent after the trailing edge.

clip_behavior
The content will be clipped (or not) according to this option.

Value is of type ClipBehavior and defaults to ClipBehavior.HARD_EDGE.

controls
A list of Controls to display inside ListView.

divider_thickness
If greater than 0 then Divider is used as a spacing between list view items.

first_item_prototype
True if the dimensions of the first item should be used as a "prototype" for all other items, i.e. their height or width will be the same as the first item.

Defaults to False.

horizontal
True to layout ListView items horizontally.

item_extent
A fixed height or width (for horizontal ListView) of an item to optimize rendering.

on_scroll_interval
Throttling in milliseconds for on_scroll event.

Defaults to 10.

padding
The amount of space by which to inset the children.

Value is of typePadding.

reverse
Defines whether the scroll view scrolls in the reading direction.

Defaults to False.

semantic_child_count
The number of children that will contribute semantic information.

spacing
The height of Divider between ListView items. No spacing between items if not specified.

Methods
scroll_to(offset, delta, key, duration, curve)
Moves scroll position to either absolute offset, relative delta or jump to the control with specified key.

See Column.scroll_to() for method details and examples.

Events
on_scroll
Fires when scroll position is changed by a user.

Event handler argument is an instance of OnScrollEvent class.